{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Learning Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**By Anthony DeBarros**\n",
    "[@anthonydb](https://twitter.com/anthonydb)\n",
    "\n",
    "Welcome to Python! In this notebook, you'll find examples of Python code that start with the basics—the building blocks of the language—and work through examples including data transformation, reading data from an API, reading and writing files, and scraping a website. For additional information, the documentation at https://www.python.org/ is helpful."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting Started"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These exercises make a few assumptions:\n",
    "\n",
    "- You have Python 3 installed on your computer.\n",
    "- You know how to install packages using pip (I highly recommend you use a virtual environment). For details, see https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/\n",
    "\n",
    "Let's start with checking your Python version:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking your Python version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To tell the notebook to execute the contents of a cell, press SHIFT + ENTER, or click the arrow in the toolbar.\n",
    "\n",
    "import sys\n",
    "print(sys.version)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Installing dependencies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the more advanced portions of this exercise, you'll need to have the following Python libraries installed:\n",
    "\n",
    "- requests\n",
    "- BeautifulSoup 4\n",
    "- pandas\n",
    "\n",
    "You can do that via `pip`. Note that you may need to restart the notebook kernel to use the new packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%pip install requests beautifulsoup4 pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Printing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `print()` statement sends output to your terminal. Or, in this case, to the notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example\n",
    "\n",
    "print('Hello, world!')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variables hold data of several types, including strings, numbers and objects such as lists. To store a value in a variable, we use the `=` operator. Python is a \"dynamically typed\" language, meaning that you don't need to declare a variable's type before assigning a value to it. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Integers and decimals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's start with basic math. We can use Python as a calculator.\n",
    "\n",
    "5 + 4.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# But it's more powerful to assign these values to variables.\n",
    "\n",
    "a = 5\n",
    "b = 4.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now you can do math with the variables!\n",
    "\n",
    "print(a + b)\n",
    "print(a + 5)\n",
    "print(a / b)\n",
    "print(a ** 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# When assigning string (text) values to a variable, you enclose the text in either single or double quotes.\n",
    "\n",
    "a = 'Horse'\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Strings have methods you can use to transform text.\n",
    "\n",
    "print(a.upper())\n",
    "print(a.lower())\n",
    "print(a.replace('e', 'ey'))\n",
    "print(a.replace('e', 'ey').lower())\n",
    "\n",
    "# List of string methods at https://www.w3schools.com/python/python_ref_string.asp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The methods do not alter the original string.\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# If you want to permanently store the change, assign the value to a new variable\n",
    "uppercase_a = a.upper()\n",
    "uppercase_a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Concatenation: Combining strings into a single output.\n",
    "\n",
    "car_make = 'Honda'\n",
    "car_model = 'Civic'\n",
    "car_year = '2012'\n",
    "\n",
    "print(car_make + ' ' + car_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Note: If you want to concatenate a number and a string, you must convert the number to a string\n",
    "# using the str() function!\n",
    "\n",
    "a = 5\n",
    "\n",
    "print('The number is ' + str(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# String interpolation: Insert variables into strings.\n",
    "\n",
    "name = 'Bobby'\n",
    "product = 'beachball polish'\n",
    "day = 'Friday'\n",
    "\n",
    "print(f'Hi, {name}! Thanks for your purchase of {product} on {day}! Would you like to view more products like {product}?')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Constants and Logical Operators"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Frequently used [constants](https://docs.python.org/3/library/constants.html) and logical operators in Python include:\n",
    "\n",
    "* `True` and `False` <-- Boolean values\n",
    "* `None` <-- Indicates the absence of a value\n",
    "* `==` <-- Tests for equality\n",
    "* `and`, `or`, `not`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's load up some variables.\n",
    "\n",
    "flavor = 'chocolate'\n",
    "cone = 'sugar'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using the equality operator == , you can test whether a variable holds a certain value.\n",
    "\n",
    "# This will return False:\n",
    "\n",
    "flavor == 'maple'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This will return True:\n",
    "\n",
    "flavor == 'chocolate'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To test whether multiple conditions are True, use the `and` operator. \n",
    "\n",
    "flavor == 'chocolate' and cone == 'sugar'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use `or` to check for one or the other condition being True.\n",
    "\n",
    "flavor == 'chocolate' or flavor == 'vanilla'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign a value of True or False to a variable.\n",
    "\n",
    "is_open = False\n",
    "print(is_open)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# None is a special value that indicates \"no value\".\n",
    "\n",
    "topping = None\n",
    "print(topping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "topping is not None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Structures"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python implements several data structures that are particularly suited to organizing data. They include:\n",
    "* Lists\n",
    "* Tuples\n",
    "* Dictionaries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lists are a series of items enclosed in square brackets. Lists are mutable, meaning you can add,\n",
    "# remove or re-order items. Also known as arrays.\n",
    "\n",
    "car_models_list = ['Toyota', 'Buick', 'Kia', 'Jeep']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reference each item in a list by its position. The first item is at position 0.\n",
    "# Retrieve the first item:\n",
    "\n",
    "print(car_models_list[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Slicing is a way to retrieve a range of items from a list.\n",
    "\n",
    "# a[start:stop]  # from start through stop-1\n",
    "# a[start:]      # from start through the rest of the list\n",
    "# a[:stop]       # from the beginning of the list through stop-1\n",
    "# a[:]           # the whole list\n",
    "\n",
    "\n",
    "# Here, retrieve the first two items:\n",
    "\n",
    "print(car_models_list[0:2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# If you need the last item in a list, you can reference it like so:\n",
    "\n",
    "print(car_models_list[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the length of a list.\n",
    "\n",
    "print(len(car_models_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sort the list.\n",
    "\n",
    "car_models_list.sort()\n",
    "print(car_models_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add and remove items.\n",
    "\n",
    "car_models_list.append('Honda')\n",
    "car_models_list.remove('Kia')\n",
    "print(car_models_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lists can hold items of various types, including more lists!\n",
    "\n",
    "big_list = ['news', 1, ['house', 'rain'], 9]\n",
    "\n",
    "# To reference the list within the list, use additional index values. For example,\n",
    "# to get the value of 'rain' from the list:\n",
    "print(big_list[2][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Turn a sentence into a list with the split() string method\n",
    "\n",
    "b = 'It was a dark and stormy night.'\n",
    "print(b.split())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Tuples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tuples are similar to lists -- with two big exceptions:\n",
    "# 1. The items are enclosed in parentheses.\n",
    "# 2. Tuples are immutable. You cannot add, remove or change items.\n",
    "\n",
    "flavors = ('chocolate', 'banana', 'cheesecake')\n",
    "print(flavors[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Why would you use a tuple instead of a list? One reason \n",
    "# is to store a finite collection of values that should never change."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dictionaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dictionaries store pairs of keys and values enclosed in curly braces. \n",
    "# You reference the value by providing the key name.\n",
    "\n",
    "cars_dict = {'make': 'Honda', 'year': 2010, 'color': 'Silver'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retrieve the value for the key 'year'\n",
    "\n",
    "print(cars_dict['year'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set a new value for the key 'year'\n",
    "\n",
    "cars_dict['year'] = 2013\n",
    "print(cars_dict['year'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add a new key and value to the dictionary\n",
    "cars_dict['condition'] = 'Good'\n",
    "print(cars_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# You can add a key whose values are a list!\n",
    "\n",
    "cars_dict['owners'] = ['Susie', 'Liza', 'Marta']\n",
    "print(cars_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here's how to reference an item in that list:\n",
    "\n",
    "print(cars_dict['owners'][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combining structures"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's common in Python (and other programming languages) to combine data structures to facilitate handling large collections of data. Here are two examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of tuples\n",
    "\n",
    "performers_lists = [\n",
    "    (1, 'Daisy', 'Ridley'),\n",
    "    (2, 'Mark', 'Hamill'),\n",
    "    (3, 'John', 'Boyega')\n",
    "]\n",
    "\n",
    "# List of dictionaries\n",
    "\n",
    "performers_dicts = [\n",
    "    {'id': 1, 'first_name': 'Daisy', 'last_name': 'Ridley'},\n",
    "    {'id': 2, 'first_name': 'Mark', 'last_name': 'Hamill'},\n",
    "    {'id': 3, 'first_name': 'John', 'last_name': 'Boyega'}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Accessing items\n",
    "\n",
    "print(performers_lists[2][2])\n",
    "print(performers_dicts[2]['last_name'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Control Flows"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Control flows allow us to introduce logic and make our program behave based on criteria we determine."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `for` statement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Iterate over a list or string and perform an action on each item.\n",
    "# Note that Python requires indentation of four spaces for each line to be executed in the for statement.\n",
    "\n",
    "number_list = [1, 7, 42]\n",
    "\n",
    "for number in number_list:\n",
    "    new_number = number * 5\n",
    "    print(f'{number} times 5 equals {new_number}')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# You can nest a for statement inside a for statement.\n",
    "\n",
    "numbers_lists = [\n",
    "    [9, 2, 7],\n",
    "    [10, 5, 21],\n",
    "    [31, 22, 4]\n",
    "]\n",
    "\n",
    "for list in numbers_lists:\n",
    "    for number in list:\n",
    "        new_number = number * 5\n",
    "        print(f'{number} times 5 equals {new_number}')\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Employing the range() function to create a number series to iterate over\n",
    "\n",
    "for x in range(0,10):\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `if ... elif ... else` statement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Perform actions or control the flow of the program based on criteria.\n",
    "\n",
    "temperature = 91\n",
    "if temperature > 80:\n",
    "    print('It\\'s hot!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add additional logic and control.\n",
    "\n",
    "vote = 'Yes'\n",
    "\n",
    "if vote == 'Yes':\n",
    "    print('The vote is Yes')\n",
    "elif vote == 'No':\n",
    "    print('The vote is No')\n",
    "else:\n",
    "    print('It\\'s some other vote')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Handle multiple criteria and text cases\n",
    "\n",
    "vote = 'yes'\n",
    "\n",
    "if vote.upper() in ('YES', 'Y'):\n",
    "    print('The vote is Yes')\n",
    "elif vote.upper() in ('NO', 'N'):\n",
    "    print('The vote is No')\n",
    "else:\n",
    "    print('It\\'s some other vote')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `while` statement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Perform an action as long as a criteria is true\n",
    "\n",
    "count = 5\n",
    "\n",
    "while (count >= 0):\n",
    "    print('The count is: ' + str(count))\n",
    "    count = count - 1\n",
    "\n",
    "print('Liftoff!')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Files: Opening, Reading, Writing, Saving"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Opening a file and readings its contents is a common programming task. Here, we'll work with a plain text file. There are Python libraries that deal specifically with other file types, such as PDF or Excel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Open a file and print all the lines.\n",
    "\n",
    "f = open('data/story.txt', 'r')\n",
    "\n",
    "for line in f:\n",
    "    print(line) \n",
    "    \n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Open a file and split all the words into a list\n",
    "\n",
    "words_list = []\n",
    "\n",
    "f = open('data/story.txt', 'r')\n",
    "\n",
    "for line in f:\n",
    "    for x in line.split():\n",
    "        words_list.append(x.lower())\n",
    "\n",
    "print(words_list)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Open a file and write to it.\n",
    "\n",
    "f = open('output/my_file.txt', 'w')\n",
    "\n",
    "f.write('Hello!\\n')\n",
    "f.write('This is the second line.')\n",
    "\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read and Transform Data from a CSV file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Among the most unspectacular but necessary data analysis tasks is reading, transforming, and saving data. You can get a lot done with just the Python standard library. We are going send data back and forth among formats, particularly CSV and JSON, and transform it along the way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "\n",
    "import csv\n",
    "from itertools import islice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Open a file and use the reader function to display each line.\n",
    "# file_reader is an iterable reader object.\n",
    "# Each line in the file becomes a Python list, and \n",
    "# because each line is a list, you can reference specific elements.\n",
    "\n",
    "with open('data/us_counties_2010.csv') as csv_file:\n",
    "    file_reader = csv.reader(csv_file)\n",
    "    for row in file_reader:\n",
    "        print(row[0] + ',' + row[1] + ',' + row[9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We also can slice the reader object with itertools.islice() to remove\n",
    "# the header and just fetch a few rows.\n",
    "\n",
    "with open('data/us_counties_2010.csv') as csv_file:\n",
    "    file_reader = csv.reader(csv_file)\n",
    "    for row in islice(file_reader, 1, 4):\n",
    "        print(row[0] + ',' + row[1] + ',' + row[9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DictReader creates an object in which each row is an ordered dictionary\n",
    "# with key names from the header row.\n",
    "\n",
    "with open('data/us_counties_2010.csv') as csv_file:\n",
    "    file_reader = csv.DictReader(csv_file)\n",
    "    for row in islice(file_reader, 0, 4):\n",
    "        print(row)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Then, you can pull elements of each line via their key name.\n",
    "\n",
    "with open('data/us_counties_2010.csv') as csv_file:\n",
    "    file_reader = csv.DictReader(csv_file)\n",
    "    for row in islice(file_reader, 0, 4):\n",
    "        print(row['NAME'] + ',' + row['STUSAB'] + ',' + row['POP100'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write your output to a new CSV file\n",
    "\n",
    "out_file = open('output/new_counties_2010.csv', 'w')\n",
    "out_file.write('county, state, pop100\\n')\n",
    "\n",
    "with open('data/us_counties_2010.csv') as csv_file:\n",
    "    file_reader = csv.DictReader(csv_file)\n",
    "    for row in islice(file_reader, 0, 4):\n",
    "        out_file.write(row['NAME'] + ',' + row['STUSAB'] + ',' + row['POP100'] + '\\n')\n",
    "\n",
    "out_file.close()\n",
    "print('Finished')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert a CSV file to JSON"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dictionaries and lists are easily transformed to JSON.\n",
    "\n",
    "import json\n",
    "import collections\n",
    "\n",
    "# Define an empty list of dictionaries. Each dict will hold data on one state.\n",
    "state_pop_list = []\n",
    "\n",
    "# Open and read the CSV.\n",
    "with open('data/us_counties_2010.csv') as csv_file:\n",
    "    file_reader = csv.DictReader(csv_file)\n",
    "\n",
    "    # Turn each row into an ordered dictionary\n",
    "    for row in islice(file_reader, 0, 4):       # Note that here you're slicing only a few lines for demo purposes. Remove the islice to convert the entire file.\n",
    "        state_dict = collections.OrderedDict()\n",
    "        state_dict['cty'] = row['NAME']\n",
    "        state_dict['st'] = row['STUSAB']\n",
    "        state_dict['pop2010'] = int(row['POP100'])\n",
    "        # Append the dictionary to the list\n",
    "        state_pop_list.append(state_dict)\n",
    "\n",
    "# Use the json library to format the list of dicts as JSON and print.        \n",
    "print(json.dumps(state_pop_list, indent=4))\n",
    "\n",
    "# Write the results to a file.\n",
    "json_out = json.dumps(state_pop_list)\n",
    "\n",
    "with open('output/us_counties_2010.json', 'w') as j:\n",
    "    j.write(json_out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading JSON from an API and Saving as a CSV"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Many organizations -- including governments -- provide data via API, or Application Programming Interface. Depending on the system, an API can allow you to retrieve data, make use of system functions, or submit information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2019-09-08&endtime=2019-09-10\n",
    "\n",
    "import csv         # standard Python module for CSV data; read/write CSV files\n",
    "import json        # standard Python module for JSON data; converts JSON to Python datatypes and vice-versa\n",
    "import datetime    # standard Python module for dates\n",
    "import requests    # open source Python module for making web requests\n",
    "\n",
    "# Create a string that holds our API URL.\n",
    "quakes_url = 'https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2019-09-08&endtime=2019-09-10'\n",
    "\n",
    "# Use requests to fetch everything at URL into a variable called r.\n",
    "r = requests.get(quakes_url)\n",
    "\n",
    "# r is now a requests 'object' that contains various methods.\n",
    "# The r.text method will dispay the text retrieved from the URL.\n",
    "\n",
    "# Convert the JSON to Python data and assign that to a variable called response.\n",
    "response = json.loads(r.text)\n",
    "\n",
    "#print(response)                                       # Prints the entire response\n",
    "print(response['features'][0]['properties']['place'])  # Prints the contents of one JSON attribute\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retrieve data and write to CSV.\n",
    "\n",
    "# Open a file for writing\n",
    "earthquakes = open('output/earthquakes.csv', 'w')\n",
    "\n",
    "# Create a CSV writer object\n",
    "quake_writer = csv.writer(earthquakes, delimiter=\",\")\n",
    "\n",
    "# Create a list holding headers for the CSV columns and write to file\n",
    "headers = ['TIME', 'PLACE', 'MAGNITUDE']\n",
    "quake_writer.writerow(headers)\n",
    "\n",
    "# How long is the list of dictionaries called 'features'?\n",
    "length_of_list = len(response['features'])\n",
    "\n",
    "# Iterate through the list of features\n",
    "for i in range(0, length_of_list):\n",
    "    # Retrieve each column\n",
    "    time = response['features'][i]['properties']['time']\n",
    "    place = response['features'][i]['properties']['place']\n",
    "    magnitude = response['features'][i]['properties']['mag']\n",
    "    \n",
    "    # We have to convert the time from the 'epoch' format to something readable\n",
    "    time = datetime.datetime.fromtimestamp(time / 1000.0).strftime('%Y-%m-%d %H:%M:%S')\n",
    "    \n",
    "    # Assemble the column values into a tuple and write to the CSV\n",
    "    quake = (time, place, magnitude)\n",
    "    quake_writer.writerow(quake)\n",
    "    \n",
    "# Close the CSV file    \n",
    "earthquakes.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Analysis Using pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pandas is a Python data analysis library. Learn more at https://pandas.pydata.org/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Largest county in square miles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the pandas library and read the CSV.\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "pd.options.display.max_rows = 999   # This setting will increase the number of result rows you can see in the notebook.\n",
    "\n",
    "census_df = pd.read_csv('data/us_counties_2010.csv')\n",
    "census_df.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count number of counties per state.\n",
    "\n",
    "census_df['STUSAB'].value_counts().reset_index(name='count')\n",
    "\n",
    "# Also works:\n",
    "# census_df.groupby('STUSAB')['STUSAB'].agg('count').reset_index(name='count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Total, mean and median of the pop100 column.\n",
    "\n",
    "total = census_df['POP100'].sum()\n",
    "mean = census_df['POP100'].mean()\n",
    "median = census_df['POP100'].median()\n",
    "\n",
    "print('Total: ' + str(total))\n",
    "print('Mean: ' + str(mean))\n",
    "print('Median: ' + str(median))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the largest county in square miles.\n",
    "\n",
    "# First, convert the AREALAND column values from square meters to square miles and add a column\n",
    "# to the dataframe.\n",
    "square_miles = (census_df['AREALAND'] / 2589988.110336)\n",
    "census_df['square_miles'] = square_miles\n",
    "\n",
    "# Round the column, then sort by square_miles and show the first 10 rows of the dataframe\n",
    "census_df['square_miles'] = census_df['square_miles'].round(decimals = 1)\n",
    "census_df.sort_values(by = 'square_miles', ascending = False).head(10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Total Housing Units By State"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here, you group the dataframe by the STUSAB column and calculate the sum\n",
    "\n",
    "census_df.groupby(['STUSAB']).sum()[['HU100']]                    # creates a dataframe\n",
    "# census_df.groupby('STUSAB').sum().HU100                         # creates a series\n",
    "# census_df.groupby('STUSAB').sum().HU100.reset_index()           # creates a series and resets to a dataframe\n",
    "\n",
    "# Output to CSV\n",
    "#census_df.groupby('STUSAB').sum().HU100.to_csv('housing.csv', header=True)\n",
    "#census_df.groupby('STUSAB').sum()[['HU100']].to_csv('housing.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Population per Housing Unit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the counties with the most people per housing unit.\n",
    "\n",
    "pop_per_hu = (census_df['POP100'] / census_df['HU100'])\n",
    "census_df['pop_per_hu'] = pop_per_hu\n",
    "census_df['pop_per_hu'] = census_df['pop_per_hu'].round(decimals = 1)\n",
    "census_df.sort_values(by = 'pop_per_hu', ascending = False).head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Back to those Earthquakes ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Quakes sorted by magnitude\n",
    "\n",
    "quakes_df = pd.read_csv('output/earthquakes.csv')\n",
    "quakes_df.sort_values(by = 'MAGNITUDE', ascending = False).head(7)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Scraping a Website"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes, the data you want isn't readily downloadable. But you can retrieve it programmatically with Python from a website. Here' we'll scrape data from the FAA's airplane registry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# URL to scrape:\n",
    "# https://registry.faa.gov/currentreg/CurrentRegReport_Results.aspx?Mfrtxt=&sort_option=2&PageNo=1\n",
    "\n",
    "# Import libraries\n",
    "import re                        # standard Python module for regular expressions\n",
    "import csv                       # standard Python module for CSV data; read/write CSV files\n",
    "import requests                  # open source Python module for making web requests\n",
    "from bs4 import BeautifulSoup    # open source Python module for parsing HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://registry.faa.gov/currentreg/CurrentRegReport_Results.aspx?Mfrtxt=&Sort_Option=2&PageNo=1'\n",
    "r = requests.get(url)\n",
    "# print(r.text)\n",
    "\n",
    "# Convert the HTML to a Beautiful Soup object -- turning HTML into Python objects such as lists and dictionaries.\n",
    "\n",
    "html_soup = BeautifulSoup(r.text, 'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the table that has a certain CSS class\n",
    "\n",
    "table = html_soup.find('table', {\"class\": \"Repeater\"})\n",
    "print(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find all the table rows\n",
    "\n",
    "for row in table.find_all('tr')[1:]:\n",
    "    columns = row.find_all('td')\n",
    "    link = columns[0].find('a').get('href')\n",
    "    n_number = columns[0].find('a').text\n",
    "    name = columns[1].find('span').text\n",
    "    model = columns[2].find('span').text\n",
    "    cert_date = columns[3].find('span').text\n",
    "    name_address = columns[4].text\n",
    "    print(link, n_number, name, model, cert_date, name_address)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Same code, but here we write to a CSV:\n",
    "\n",
    "csvfile = open('output/aircraft.csv', 'w')\n",
    "csvwriter = csv.writer(csvfile, delimiter=',')\n",
    "\n",
    "headers = ('LINK', 'N_NUMBER', 'NAME',\n",
    "           'MODEL', 'CERT_DATE', 'NAME_ADDRESS')\n",
    "csvwriter.writerow(headers)\n",
    "\n",
    "for row in table.find_all('tr')[1:]:\n",
    "    columns = row.find_all('td')\n",
    "    link = columns[0].find('a').get('href')\n",
    "    n_number = columns[0].find('a').text\n",
    "    name = columns[1].find('span').text\n",
    "    model = columns[2].find('span').text\n",
    "    cert_date = columns[3].find('span').text\n",
    "    name_address = columns[4].text\n",
    "    \n",
    "    parsed_row = (link, n_number, name, model, cert_date, name_address)\n",
    "    \n",
    "    csvwriter.writerow(parsed_row)\n",
    "\n",
    "csvfile.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# How can you modify this code to iterate through each page of the table?\n",
    "# One approach is to use a Python for statement to create one URL for each page\n",
    "# in the table. You could then add your processing code to this.\n",
    "\n",
    "url = 'https://registry.faa.gov/currentreg/CurrentRegReport_Results.aspx?Mfrtxt=&Sort_Option=2&PageNo='\n",
    "\n",
    "for page in range(1, 78):\n",
    "    url_scrape = url + str(page)\n",
    "    print(url_scrape)\n",
    "    \n",
    "    # Processing happens here, once for each page."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
